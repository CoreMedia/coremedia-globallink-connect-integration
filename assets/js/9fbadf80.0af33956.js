"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8343],{1096:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"developers/design","title":"Design Details","description":"Insights to the design of the CoreMedia GlobalLink Connector.","source":"@site/docs/developers/design.md","sourceDirName":"developers","slug":"/developers/design","permalink":"/coremedia-globallink-connect-integration/next/developers/design","draft":false,"unlisted":false,"editUrl":"https://github.com/CoreMedia/coremedia-globallink-connect-integration/tree/main/website/docs/developers/design.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"description":"Insights to the design of the CoreMedia GlobalLink Connector."},"sidebar":"docs","previous":{"title":"CoreMedia Blueprint","permalink":"/coremedia-globallink-connect-integration/next/developers/coremedia-blueprint"},"next":{"title":"Workspace Structure","permalink":"/coremedia-globallink-connect-integration/next/developers/workspace"}}');var o=t(5813),i=t(2244);const r={sidebar_position:3,description:"Insights to the design of the CoreMedia GlobalLink Connector."},l="Design Details",a={},d=[{value:"Translation Types",id:"translation-types",level:2},{value:"CMS Workflow to GCC Workflow",id:"cms-workflow-to-gcc-workflow",level:2},{value:"Workflow Stages",id:"workflow-stages",level:3},{value:"Cancellation",id:"cancellation",level:2},{value:"One Workflow for all Locales vs. One Workflow per Locale",id:"one-workflow-for-all-locales-vs-one-workflow-per-locale",level:2},{value:"Not supported: Reopening",id:"not-supported-reopening",level:2}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"design-details",children:"Design Details"})}),"\n",(0,o.jsx)(n.h2,{id:"translation-types",children:"Translation Types"}),"\n",(0,o.jsx)(n.p,{children:"In CoreMedia CMS there exist two translation types:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Translation to derived sites, and"}),"\n",(0,o.jsx)(n.li,{children:"Translation to preferred site."}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["While for ",(0,o.jsx)(n.em,{children:"Translation to derived sites"})," the site-managers of the master site\nsend localization/translation items to the derived sites, the local\nsite-managers of each derived site may as well trigger translation from master\nsite to their derived site (assumed to be set as preferred site)."]}),"\n",(0,o.jsxs)(n.p,{children:["This implementation is designed to support ",(0,o.jsx)(n.em,{children:"Translation to derived sites"})," and\ninstead of local site-managers accepting the translation, it is designed, so\nthat the site-manager of the master site will also take care of accepting the\ntranslation results."]}),"\n",(0,o.jsx)(n.h2,{id:"cms-workflow-to-gcc-workflow",children:"CMS Workflow to GCC Workflow"}),"\n",(0,o.jsx)(n.p,{children:"GCC uses specific terms for the structure of their translation workflow. The\nterms are important to understand, especially how they map to the CoreMedia CMS\ntranslation workflow:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Submission:"})}),"\n",(0,o.jsx)(n.p,{children:"The CMS translation workflow creates and starts a submission when handing\nover the contents to be translated to GCC. A submission has one source\nlocale and consists of several jobs."}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Job:"})}),"\n",(0,o.jsxs)(n.p,{children:["One job is bound to one target locale. It may consist of several tasks. In\nthis implementation jobs are not really visible. See ",(0,o.jsx)(n.em,{children:"Task"})," documentation\nbelow."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Task:"})}),"\n",(0,o.jsx)(n.p,{children:"One task is bound to one file to translate. As the CoreMedia CMS translation\nworkflow creates one XLIFF document per target site/target locale, all jobs\nof this implementation only contain one task."}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"workflow-stages",children:"Workflow Stages"}),"\n",(0,o.jsx)(n.p,{children:"A rough sketch of the CoreMedia CMS translation workflow shows how the GCC\ntranslation workflow is embedded into the CMS workflow (here: standard\nprocessing):"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Preprocessing Phase:"})," In this phase, the target contents are prepared to\nreceive the translation results later on. Missing contents are created,\nlinks are adjusted, some properties automatically merged (like linklists\nfor example)."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Translation Phase:"})," Contents are handed over as XLIFF documents to GCC.\nThe state is regularly polled. XLIFF documents from completed tasks are\nautomatically downloaded and applied. Changes are applied as\ntranslation-workflow-robot user."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Postprocessing Phase:"})," Once the submission is completed, the CMS workflow\nswitches to post-processing phase. Editors have the change to review the\ntranslation and eventually accept the translation. As soon as they accept\nthe translation, the last step is to update the master version number in\nthe target contents, to signal from which master version they received\nthe updates."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"cancellation",children:"Cancellation"}),"\n",(0,o.jsx)(n.p,{children:"GCC offers cancellation at the task and the submission level. Note, that the\nCoreMedia CMS translation workflow does not support cancellation at task level."}),"\n",(0,o.jsxs)(n.p,{children:["The reason can be found in the ",(0,o.jsx)(n.em,{children:"Workflow Stages"})," mentioned above. When a\ncancellation is detected, target contents may have received some changes\nalready, and cancellation requires to revert all those changes. As there is no\npartial revert of some contents, all contents which are part of the CMS\ntranslation workflow need to be reverted."]}),"\n",(0,o.jsx)(n.p,{children:"Thus, as the existing CMS API does not support partial cancellation, the same\napplies to the GCC submission which must not be partially cancelled."}),"\n",(0,o.jsx)(n.p,{children:"The current implementation is aware of partial cancellation, though: If only\nsome tasks are cancelled, the implementation will stop downloading results from\nthese tasks and wait for the whole submission to be marked as cancelled. Such\nwait loops are logged."}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.em,{children:"Planned/Later:"})," If you perform cancellation within the CMS workflow, it is\nalways ensured, that the complete submission is cancelled."]}),"\n",(0,o.jsx)(n.h2,{id:"one-workflow-for-all-locales-vs-one-workflow-per-locale",children:"One Workflow for all Locales vs. One Workflow per Locale"}),"\n",(0,o.jsxs)(n.p,{children:["Per default the GCC extension will create one workflow instance for all locales,\nthat were chosen in the ",(0,o.jsx)(n.em,{children:"StartWorkflowWindow"}),". Each locale results into a\nseparate Job, which are all bundled under one submission, that is tracked by one\nworkflow."]}),"\n",(0,o.jsx)(n.p,{children:"This means that the workflow is only marked as completed, when all locales\n(Jobs) have been marked as completed."}),"\n",(0,o.jsx)(n.p,{children:"The GCC extension can also be configured, to start one workflow instance per\nlocale. This means that one submission, holding only one job is created per\nchosen locale."}),"\n",(0,o.jsxs)(n.p,{children:["This can be achieved by setting the value ",(0,o.jsx)(n.em,{children:"createWorkflowPerTargetSite"})," in the\n",(0,o.jsx)(n.code,{children:"GccStudioPlugin"})," to ",(0,o.jsx)(n.em,{children:"true"})," (this is actually the default, therefore you can\nalso completely remove this configuration). Furthermore, you need to change the\ntype of the workflow variable ",(0,o.jsx)(n.em,{children:"targetSiteId"})," in the workflow definition\n",(0,o.jsx)(n.em,{children:"translation-global-link.xml"})," to ",(0,o.jsx)(n.em,{children:"String"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"not-supported-reopening",children:"Not supported: Reopening"}),"\n",(0,o.jsx)(n.p,{children:"Reopening already delivered submissions is not supported by this implementation.\nInstead, please start a new translation workflow for contents where you want to\nget the translation result adjusted."}),"\n",(0,o.jsx)(n.p,{children:"Implementing reopening from already delivered submissions would require to cope\nwith challenges like the following:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Polling:"})," The implementation uses polling the translation state, while a\nCoreMedia workflow is active. Polling ends as soon as the CoreMedia workflow\nis done. In order to respond to reopening submissions at GCC you either need\nto keep polling even after the workflow is done, or you need to change the\nimplementation to use push notifications from GCC backend instead. Push\nnotifications is not part of this implementation as it would require to\nexpose an additional service of the CoreMedia CMS backend."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Updated Contents/Resolving Conflicts:"})," As reopening may occur after several\ndays or even months, it is most likely that your target contents got updated\nmeanwhile. Trying to re-import new translation results may cause hard to\nresolve conflicts, because of for example missing linked documents in\nCoreMedia RichText."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Redelivered Submissions:"}),' Slightly different to that, so-called redelivered\nsubmissions are supported. Redelivered submissions are submissions that were\ncompleted already, but have not been marked as delivered (thus, successful\ndownload and import signalled by this API), for example, because the resulting\nXLIFF is invalid. In these cases an extra twist is supported, where the\ntranslators instead mark the submission as "Redelivered" and subsequently send\nthe XLIFF by different means (like email).']})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},2244:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var s=t(9729);const o={},i=s.createContext(o);function r(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);