"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[443],{2244:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var i=r(9729);const s={},t=i.createContext(s);function o(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(t.Provider,{value:n},e.children)}},2904:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"release/tests/backend-error-handling","title":"Backend Error Handling","description":"Scenario: GCC Backend Error Handling (Submission Error State).","source":"@site/dev/release/tests/07-backend-error-handling.md","sourceDirName":"release/tests","slug":"/release/tests/backend-error-handling","permalink":"/coremedia-globallink-connect-integration/dev/release/tests/backend-error-handling","draft":false,"unlisted":false,"editUrl":"https://github.com/CoreMedia/coremedia-globallink-connect-integration/tree/main/website/dev/release/tests/07-backend-error-handling.md","tags":[{"inline":true,"label":"test","permalink":"/coremedia-globallink-connect-integration/dev/tags/test"},{"inline":true,"label":"scenario","permalink":"/coremedia-globallink-connect-integration/dev/tags/scenario"},{"inline":true,"label":"manual","permalink":"/coremedia-globallink-connect-integration/dev/tags/manual"},{"inline":true,"label":"error-handling","permalink":"/coremedia-globallink-connect-integration/dev/tags/error-handling"}],"version":"current","sidebarPosition":7,"frontMatter":{"description":"Scenario: GCC Backend Error Handling (Submission Error State).","tags":["test","scenario","manual","error-handling"]},"sidebar":"dev","previous":{"title":"Connector Key Recovery","permalink":"/coremedia-globallink-connect-integration/dev/release/tests/connector-key-recovery"},"next":{"title":"XLIFF Error Handling","permalink":"/coremedia-globallink-connect-integration/dev/release/tests/xliff-error-handling"}}');var s=r(5813),t=r(2244);const o={description:"Scenario: GCC Backend Error Handling (Submission Error State).",tags:["test","scenario","manual","error-handling"]},a="Backend Error Handling",l={},c=[{value:"Quick Steps",id:"quick-steps",level:2},{value:"Detailed Steps",id:"detailed-steps",level:2}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"backend-error-handling",children:"Backend Error Handling"})}),"\n",(0,s.jsx)(n.p,{children:"This test is about submissions within the GCC backend, which are in an error\nstate. This has been observed, for example, when trying to send a submission\nwith instructions containing characters from the Supplementary Multilingual\nPlane (SMP)."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Alternative Scenario:"}),'\nThe given manual test steps "mock" this state, as we cannot ensure that an\nerror persists over time. If you want to test the real-life behavior, you\nmay choose using the "default" rather than the "mock" type and instead of\nusing ',(0,s.jsx)(n.code,{children:"mock.error"}),", you may use the ",(0,s.jsx)(n.code,{children:"submissionInstruction.characterType"}),"\nsetting. Set it to ",(0,s.jsx)(n.code,{children:"unicode"})," and add some SMP characters to the instructions\n(thus, workflow notes), like for example, the dove emoji: \ud83d\udd4a."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Advantage"}),": The advantage of the real-world scenario is, that you may also\ntest, that a submission in an error state may still be canceled."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Connector Type"}),": ",(0,s.jsx)(n.code,{children:"mock"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Key Type"}),": ",(0,s.jsx)(n.em,{children:"irrelevant"})]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"quick-steps",children:"Quick Steps"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Log in as Rick C."}),"\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:"mock"})," type."]}),"\n",(0,s.jsxs)(n.li,{children:["Set ",(0,s.jsx)(n.code,{children:"mock.error"})," to ",(0,s.jsx)(n.code,{children:"SUBMISSION_ERROR"}),". For a quick path, you may skip\nthe extra submission state mocking as sketched in the detailed steps."]}),"\n",(0,s.jsx)(n.li,{children:"Start a translation of an article."}),"\n",(0,s.jsx)(n.li,{children:"Open the started workflow process."}),"\n",(0,s.jsx)(n.li,{children:'Expect a user-task "Download error" and accept it.'}),"\n",(0,s.jsx)(n.li,{children:'Validate that a localized error message like "General submission failure"\nis shown.'}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"detailed-steps",children:"Detailed Steps"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Log in as Rick C."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Open the GlobalLink\nsettings ",(0,s.jsx)(n.code,{children:"/Settings/Options/Settings/Translation Services/GlobalLink"})]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"type"})," is set to ",(0,s.jsx)(n.code,{children:"mock"})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"mock.error"})," is set to ",(0,s.jsx)(n.code,{children:"SUBMISSION_ERROR"})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Submission State Mocking"}),": Add (or activate) the following mock\nsettings (optional step, but recommended to test closer to the real-world\nscenario):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"mock:\n  # [...]\n  submissionStates:\n    Started:\n      override: Pre-Process\n      # Mark as final to ease mocking here. Prevents further states,\n      # though, which is, that you also cannot cancel the submission\n      # in this mocked scenario.\n      final: true\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Start a translation for an article."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Open the workflow in ",(0,s.jsx)(n.em,{children:"Workflow App"})," via nagbar shown in the article."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:'Wait until the current task is "Download error" and offered to you.'}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Accept the task."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:'Click the error issue information and see a "General submission failure."'}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:'In the real-world scenario, you may now continue like to "Abort and rollback\nchanges" as most likely, the submission cannot be repaired. This is not possible\nin this simple mocked scenario, though.'})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);