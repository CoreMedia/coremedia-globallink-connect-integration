"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6365],{2244:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>s});var t=o(9729);const i={},r=t.createContext(i);function a(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:n},e.children)}},4288:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"developers/coremedia-blueprint","title":"CoreMedia Blueprint","description":"Integration into the CoreMedia Blueprint.","source":"@site/versioned_docs/version-2412.x/developers/coremedia-blueprint.md","sourceDirName":"developers","slug":"/developers/coremedia-blueprint","permalink":"/coremedia-globallink-connect-integration/developers/coremedia-blueprint","draft":false,"unlisted":false,"editUrl":"https://github.com/CoreMedia/coremedia-globallink-connect-integration/tree/main/website/versioned_docs/version-2412.x/developers/coremedia-blueprint.md","tags":[],"version":"2412.x","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"description":"Integration into the CoreMedia Blueprint."},"sidebar":"docs","previous":{"title":"Introduction","permalink":"/coremedia-globallink-connect-integration/developers/introduction"},"next":{"title":"Design Details","permalink":"/coremedia-globallink-connect-integration/developers/design"}}');var i=o(5813),r=o(2244);const a={sidebar_position:2,description:"Integration into the CoreMedia Blueprint."},s="CoreMedia Blueprint",l={},c=[{value:"Adding GCC Adapter to the Blueprint",id:"adding-gcc-adapter-to-the-blueprint",level:2},{value:"Enabling the Extension",id:"enabling-the-extension",level:2},{value:"Adding GCC Workflow to Workflow Server Deployment",id:"adding-gcc-workflow-to-workflow-server-deployment",level:2},{value:"Enabling External Definition of API Key",id:"enabling-external-definition-of-api-key",level:2},{value:"Extension Point for Custom Properties",id:"extension-point-for-custom-properties",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"coremedia-blueprint",children:"CoreMedia Blueprint"})}),"\n",(0,i.jsx)(n.p,{children:"How to integrate and enable the GlobalLink Connector into the CoreMedia\nBlueprint."}),"\n",(0,i.jsx)(n.h2,{id:"adding-gcc-adapter-to-the-blueprint",children:"Adding GCC Adapter to the Blueprint"}),"\n",(0,i.jsx)(n.p,{children:"There are many approaches for integrating the extension into the Blueprint. Each\none comes with its own pros and cons depending on your use case."}),"\n",(0,i.jsxs)(n.p,{children:["With ",(0,i.jsx)(n.code,{children:"git subtree"})," you can easily change the adapter code and cherry-pick\nimportant fixes of upcoming releases without having to create a fork of the\nadapter itself. This is one of the main advantages of the subtree approach over\n",(0,i.jsx)(n.code,{children:"git submodule"}),". Contributing back upstream is however slightly more\ncomplicated."]}),"\n",(0,i.jsx)(n.p,{children:"Feel free to choose the strategy that fits your needs best. For example:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"As a Git Subtree from the workspace root (recommended)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"mkdir -p modules/extensions\n# Add sub-project as a remote to enable short form\ngit remote add -f gcc https://github.com/CoreMedia/coremedia-globallink-connect-integration.git\ngit subtree add --prefix modules/extensions/gcc gcc main --squash\n# For example - update the sub-project at a later date...\ngit fetch gcc main\ngit subtree pull --prefix modules/extensions/gcc gcc main --squash\n"})}),"\n",(0,i.jsxs)(n.p,{children:["See\n",(0,i.jsx)(n.a,{href:"https://github.com/CoreMedia/coremedia-globallink-connect-integration/issues/28",title:"Git subtree approach \xb7 Issue #28 \xb7 CoreMedia/coremedia-globallink-connect-integration",children:"Issue 28"}),"\nfor a more detailed description of a similar approach."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Or as a Git Submodule from the workspace root"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'git submodule add https://github.com/CoreMedia/coremedia-globallink-connect-integration.git modules/extensions/gcc\ngit submodule update --init --recursive\ncd modules/extensions/gcc\ngit checkout <release-tag>\ncd ..\n# Add and commit .gitmodules and current HEAD of submodule \ngit add .\ngit commit -m "Initial integration of submodule based on <release-tag>"\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["If you want to contribute to this project \u2014 which we hope for \u2014 you need to fork\nthe project. For example, with the ",(0,i.jsx)(n.code,{children:"git subtree"})," approach, pushing to your fork\ncould look as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Add your fork as another remote\ngit remote add -f my-gcc https://github.com/my-company/coremedia-globallink-connect-extended.git\n# For example - update the sub-project at a later date...\ngit subtree push --prefix=modules/extensions/gcc my-gcc main\n"})}),"\n",(0,i.jsx)(n.p,{children:"You can then send us the corresponding pull request."}),"\n",(0,i.jsx)(n.h2,{id:"enabling-the-extension",children:"Enabling the Extension"}),"\n",(0,i.jsxs)(n.p,{children:["Execute the following command in ",(0,i.jsx)(n.code,{children:"workspace-configuration/extensions"})," below the\nworkspace root folder:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cd workspace-configuration/extensions\nmvn extensions:sync -Denable=gcc\n"})}),"\n",(0,i.jsx)(n.p,{children:"This will activate the extension. The extension tool will also set the relative\npath for the parents of the extension modules."}),"\n",(0,i.jsx)(n.h2,{id:"adding-gcc-workflow-to-workflow-server-deployment",children:"Adding GCC Workflow to Workflow Server Deployment"}),"\n",(0,i.jsxs)(n.p,{children:["You need to add ",(0,i.jsx)(n.code,{children:"translation-global-link.xml"})," to your workflow definitions in\n",(0,i.jsx)(n.code,{children:"global/management-tools/management-tools-image/src/main/image/coremedia/import-default-workflows"}),".\nAdd\n",(0,i.jsx)(n.code,{children:"TranslationGlobalLink:/com/coremedia/labs/translation/gcc/workflow/translation-global-link.xml"}),"\nto the variable ",(0,i.jsx)(n.code,{children:"DEFAULT_WORKFLOWS"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"enabling-external-definition-of-api-key",children:"Enabling External Definition of API Key"}),"\n",(0,i.jsxs)(n.p,{children:["If the ",(0,i.jsx)(n.em,{children:"API key"})," for communication with GlobalLink is to be set externally\nupon system startup, add the following lines to file\n",(0,i.jsx)(n.code,{children:"apps/workflow-server/spring-boot/workflow-server-app/src/main/resources/application.properties"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"# GlobalLink\ngcc.apiKey=\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If in doubt, check with the system's administrator how the API key is to be\ndefined. See ",(0,i.jsx)(n.a,{href:"../administrators/configure-gcc-settings#server-side-configuration",title:"Administrators | Configuring Connection Settings",children:"Server-side configuration"}),"\nfor details."]}),"\n",(0,i.jsx)(n.h2,{id:"extension-point-for-custom-properties",children:"Extension Point for Custom Properties"}),"\n",(0,i.jsx)(n.p,{children:"In case you need additional properties for interacting with GlobalLink REST\nbackend, you may need to extend the Studio Workflow UI as well as the Workflow\nActions. You will find details how to do that here:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://documentation.coremedia.com/cmcc-12/artifacts/2412.0/webhelp/coremedia-en/content/projectExtensions.html",title:"Blueprint Developer Manual / Project Extensions",children:"Blueprint Developer Manual / Project Extensions"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://documentation.coremedia.com/cmcc-12/artifacts/2412.0/webhelp/coremedia-en/content/translationWorkflow_configurationAndCustomization.html",title:"Blueprint Developer Manual / Configuration and Customization",children:"Blueprint Developer Manual / Configuration and Customization"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://documentation.coremedia.com/cmcc-12/artifacts/2412.0/webhelp/coremedia-en/content/TranslationWorkflowUiCustomization.html",title:"Blueprint Developer Manual / Translation Workflow Studio UI",children:"Blueprint Developer Manual / Translation Workflow Studio UI"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://documentation.coremedia.com/cmcc-12/artifacts/2412.0/webhelp/workflow-developer-en/content/WorkflowVariables.html",title:"Workflow Manual / Workflow Variables",children:"Workflow Manual / Workflow Variables"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);