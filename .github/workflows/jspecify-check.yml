# JSpecify Nullness Checker CI/CD Workflow
#
# This workflow runs the experimental JSpecify reference checker (NullSpecChecker)
# from https://github.com/jspecify/jspecify-reference-checker over all Maven modules
# containing Java source code in this repository.
#
# JSpecify is a standard for nullness annotations in Java. The reference checker is
# a proof-of-concept implementation that validates nullness contracts at compile-time.
# It requires Java 17+ and builds the checker from source using Gradle.
#
# The workflow provides efficient caching of the checker build artifacts to minimize
# redundant compilation across runs, while ensuring security through minimal permissions
# and SHA-pinned action versions.
#
# Authored by GitHub Copilot.

name: JSpecify Checker

on:
  # Trigger on pull request events when ready for review
  # - opened: PR is created
  # - synchronize: New commits pushed to PR branch
  # - ready_for_review: Draft PR converted to ready state
  pull_request:
    types: [opened, synchronize, ready_for_review]
    paths:
      - '**/*.java'           # Any Java source file changes
      - 'pom.xml'             # Root POM changes
      - '**/pom.xml'          # Any module POM changes
      - 'bin/check-jspecify-dev.sh'  # Checker script changes

  # Manual trigger with optional project root override
  workflow_dispatch:
    inputs:
      project_root:
        description: 'Project root directory (relative to workspace)'
        required: false
        default: '.'
        type: string

  # Reusable workflow for composition with other workflows
  workflow_call:
    inputs:
      project_root:
        description: 'Project root directory (relative to workspace)'
        required: false
        default: '.'
        type: string

# Security: Minimal permissions following principle of least privilege
permissions:
  contents: read        # Read repository content and checkout code
  pull-requests: read   # Read PR metadata for conditional execution

env:
  # Tool versions - centrally configurable for easy maintenance
  JAVA_VERSION: '17'              # JSpecify checker requires Java 17+
  JAVA_DISTRIBUTION: 'corretto'   # Amazon Corretto OpenJDK distribution
  MAVEN_VERSION: '3.9.6'          # Maven version for dependency management

  # JSpecify checker configuration - timeouts and retry behavior
  # These values are passed to bin/check-jspecify-dev.sh
  GRADLE_CONN_TIMEOUT_MS: '60000'       # 60s connection timeout for Gradle downloads
  GRADLE_SOCKET_TIMEOUT_MS: '180000'    # 3min socket timeout for large downloads
  GRADLE_MAX_RETRIES: '5'               # Retry attempts for failed downloads
  GRADLE_INITIAL_BACKOFF_MS: '2000'     # Initial backoff delay (2s)
  GRADLE_BUILD_MAX_ATTEMPTS: '3'        # Max attempts to build checker if failures occur

jobs:
  jspecify-check:
    name: Run JSpecify Nullness Checker
    runs-on: ubuntu-latest
    # Skip execution for draft PRs to save CI resources, but allow manual/reusable triggers
    if: github.event.pull_request.draft == false || github.event_name == 'workflow_dispatch' || github.event_name == 'workflow_call'

    steps:
      # Checkout repository with full git history for potential git operations in checker
      - name: Checkout repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          fetch-depth: 0  # Full history needed for git-based operations

      # Set up Java environment with Maven dependency caching
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4.7.1
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: maven  # Cache Maven dependencies between runs

      # Ensure specific Maven version for reproducible builds
      - name: Set up Maven ${{ env.MAVEN_VERSION }}
        uses: stCarolas/setup-maven@d6af6abeda15e98926a57b5aa970a96bb37f97d1 # v5
        with:
          maven-version: ${{ env.MAVEN_VERSION }}

      # Verify all required tools are available and show versions for debugging
      - name: Verify required tools
        run: |
          echo "=== Tool Versions ==="
          java -version
          javac -version
          mvn --version
          git --version
          echo "====================="

      # Cache JSpecify checker artifacts to avoid rebuilding on every run
      # Cache key includes script hash to invalidate when checker logic changes
      - name: Cache JSpecify checker artifacts
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: ~/.cache/coremedia-gcc/jspecify  # XDG cache directory
          key: jspecify-checker-${{ runner.os }}-${{ hashFiles('bin/check-jspecify-dev.sh') }}
          restore-keys: |
            jspecify-checker-${{ runner.os }}-   # Partial match fallback

      # Execute the JSpecify checker script with configured timeouts
      - name: Run JSpecify checker
        run: |
          PROJECT_ROOT="${{ inputs.project_root || '.' }}"
          if [[ "$PROJECT_ROOT" != "." ]]; then
            ./bin/check-jspecify-dev.sh --project-root "$PROJECT_ROOT"
          else
            ./bin/check-jspecify-dev.sh
          fi
        env:
          # Pass environment variables for Gradle timeout configuration
          GRADLE_CONN_TIMEOUT_MS: ${{ env.GRADLE_CONN_TIMEOUT_MS }}
          GRADLE_SOCKET_TIMEOUT_MS: ${{ env.GRADLE_SOCKET_TIMEOUT_MS }}
          GRADLE_MAX_RETRIES: ${{ env.GRADLE_MAX_RETRIES }}
          GRADLE_INITIAL_BACKOFF_MS: ${{ env.GRADLE_INITIAL_BACKOFF_MS }}
          GRADLE_BUILD_MAX_ATTEMPTS: ${{ env.GRADLE_BUILD_MAX_ATTEMPTS }}

      # Upload checker artifacts for debugging, even if the checker fails
      - name: Upload JSpecify report
        if: always()  # Upload artifacts regardless of previous step outcome
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: jspecify-report-${{ github.run_id }}
          path: |
            ~/.cache/coremedia-gcc/jspecify/jspecify-reference-checker/build/libs/*.jar
          retention-days: 7
          if-no-files-found: ignore  # Don't fail if no artifacts exist
